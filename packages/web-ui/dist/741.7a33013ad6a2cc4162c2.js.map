{"version":3,"sources":["./src/app/@core/algo.worker.ts"],"names":["ctx","self","running","timer","userOnTick","userStop","post","msg","postMessage","safeClearTimer","clearTimeout","onmessage","ev","data","type","systemId","source","config","meta","api","log","args","metric","pnl","placeOrder","order","exports","Function","fn","onTick","userStart","start","stop","e","error","String","message","t","loop","setTimeout"],"mappings":"mBAcA,MAAMA,EAAWC,KACjB,IAAIC,GAAU,EACVC,EAAa,KACbC,EAA2C,KAC3CC,EAAgC,KAEpC,SAASC,EAAKC,GAEZP,EAAIQ,YAAYD,GAGlB,SAASE,IACHN,IACFO,aAAaP,GACbA,EAAQ,MAIZH,EAAIW,UAAaC,I,QACf,MAAML,EAAMK,EAAGC,KACf,GAAKN,GAAsB,iBAARA,EAEnB,GAAiB,QAAbA,EAAIO,MAAmBZ,GA0DpB,GAAiB,SAAbK,EAAIO,KAAiB,CAC9BZ,GAAU,EACVO,IACA,IAAMJ,GAAYA,IAAc,UAChCC,EAAK,CAAEQ,KAAM,UAAWC,SAAUR,EAAIQ,gBA9DJ,CAClCb,GAAU,EACV,MAAM,SAAEa,EAAF,OAAYC,EAAZ,OAAoBC,EAApB,KAA4BC,GAASX,EAC3C,IACE,MAAMY,EAAM,CACVC,IAAK,IAAIC,IACPf,EAAK,CAAEQ,KAAM,MAAOC,WAAUM,SAChCC,OAASC,GACPjB,EAAK,CAAEQ,KAAM,SAAUC,WAAUQ,QACnCC,WAAaC,GACXnB,EAAK,CAAEQ,KAAM,QAASC,WAAUU,WAqB9BC,EAhBK,IAAIC,SACb,MACA,SACA,OACA,0HAGIX,GAAU,yTASAY,CAAGT,EAAKF,GAAU,GAAIC,GAAQ,KAAO,GACrDd,EAAuC,mBAAnBsB,EAAQG,OAAwBH,EAAQG,OAAS,KACrE,MAAMC,EAAqC,mBAAlBJ,EAAQK,MAAuBL,EAAQK,MAAQ,KACxE1B,EAAmC,mBAAjBqB,EAAQM,KAAsBN,EAAQM,KAAO,KAE/D,IAAMF,GAAaA,EAAUX,EAAKF,EAAQC,GAAS,MAAOe,GACxD3B,EAAK,CAAEQ,KAAM,QAASC,WAAUmB,MAAOC,QAAiB,QAAV,EAACF,SAAS,eAAEG,UAAWH,KAGvE,IAAII,EAAI,EACR,MAAMC,EAAO,K,MACX,GAAKpC,EAAL,CACAmC,IACA,IACEjC,GAAcA,EAAW,CAAEiC,IAAGpB,SAAQC,SACtC,MAAOe,GACP3B,EAAK,CAAEQ,KAAM,QAASC,WAAUmB,MAAOC,QAAiB,QAAV,EAACF,SAAS,eAAEG,UAAWH,KAEvE9B,EAAQoC,WAAWD,EAAM,OAE3BA,IAEA,MAAOL,GACP3B,EAAK,CAAEQ,KAAM,QAASC,SAAWR,EAAeQ,SAAUmB,MAAOC,QAAiB,QAAV,EAACF,SAAS,eAAEG,UAAWH,KAC/F/B,GAAU,EACVO,Q","file":"741.7a33013ad6a2cc4162c2.js","sourcesContent":["/* src/app/@core/algo.worker.ts */\n\n// We intentionally avoid depending on \"lib.webworker\" to prevent DOM conflicts.\ntype AnyObj = Record<string, any>;\ntype RunMsg = {\n  type: 'run';\n  systemId: string;\n  source: string;\n  config: AnyObj;\n  meta: AnyObj;\n};\ntype StopMsg = { type: 'stop'; systemId: string };\ntype LogEvent = { systemId: string; args: any[] };\n\nconst ctx: any = self as any; // treat as DedicatedWorkerGlobalScope\nlet running = false;\nlet timer: any = null;\nlet userOnTick: ((x: AnyObj) => void) | null = null;\nlet userStop: (() => void) | null = null;\n\nfunction post(msg: any) {\n  // In worker context, postMessage(message) is fine; typing via ctx avoids DOM overload.\n  ctx.postMessage(msg);\n}\n\nfunction safeClearTimer() {\n  if (timer) {\n    clearTimeout(timer);\n    timer = null;\n  }\n}\n\nctx.onmessage = (ev: MessageEvent) => {\n  const msg = ev.data as RunMsg | StopMsg;\n  if (!msg || typeof msg !== 'object') return;\n\n  if (msg.type === 'run' && !running) {\n    running = true;\n    const { systemId, source, config, meta } = msg as RunMsg;\n    try {\n      const api = {\n        log: (...args: any[]) =>\n          post({ type: 'log', systemId, args } as LogEvent),\n        metric: (pnl: number) =>\n          post({ type: 'metric', systemId, pnl }),\n        placeOrder: (order: AnyObj) =>\n          post({ type: 'order', systemId, order }),\n      };\n\n      // Evaluate user strategy in a local scope; capture exports from globals.\n      // eslint-disable-next-line no-new-func\n      const fn = new Function(\n        'api',\n        'config',\n        'meta',\n        `\n          \"use strict\";\n          // User code can define: start(api, config, meta), onTick(ctx), stop()\n          ${source || ''};\n          // expose any globals the user defined:\n          return {\n            start: (typeof start === 'function') ? start : undefined,\n            onTick: (typeof onTick === 'function') ? onTick : undefined,\n            stop: (typeof stop === 'function') ? stop : undefined\n          };\n        `\n      );\n      const exports = fn(api, config || {}, meta || {}) || {};\n      userOnTick = typeof exports.onTick === 'function' ? exports.onTick : null;\n      const userStart = typeof exports.start === 'function' ? exports.start : null;\n      userStop = typeof exports.stop === 'function' ? exports.stop : null;\n\n      try { userStart && userStart(api, config, meta); } catch (e) {\n        post({ type: 'error', systemId, error: String((e as any)?.message || e) });\n      }\n\n      let t = 0;\n      const loop = () => {\n        if (!running) return;\n        t++;\n        try {\n          userOnTick && userOnTick({ t, config, meta });\n        } catch (e) {\n          post({ type: 'error', systemId, error: String((e as any)?.message || e) });\n        }\n        timer = setTimeout(loop, 1000);\n      };\n      loop();\n\n    } catch (e) {\n      post({ type: 'error', systemId: (msg as RunMsg).systemId, error: String((e as any)?.message || e) });\n      running = false;\n      safeClearTimer();\n    }\n  } else if (msg.type === 'stop') {\n    running = false;\n    safeClearTimer();\n    try { userStop && userStop(); } catch {}\n    post({ type: 'stopped', systemId: msg.systemId });\n  }\n};\n"],"sourceRoot":"webpack:///"}